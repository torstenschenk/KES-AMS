/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include  <stdio.h>
#include  <stdlib.h>
#include  <time.h>

#include "platform.h"
//  Include  Files
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "lab3_a1_vga_v2.h"

//  Definitions
#define BASE_ADDR 0x43C00000
//#define  LEDS_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID
#define  SW_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID

#define  LED_DELAY  10000000
#define  LED_CHANNEL 1
#define  printf  xil_printf

XGpio  SWInst; // LEDInst
static int sw_value ;

/*
int  LEDOutputExample( VOID ) {
	volatile  int  Delay;

	// loop  forever  blinking  the  LED.
	while( 42 ) {
		// read buttons
		btn_value = XGpio_DiscreteRead (&BTNInst , 1);
		//  write  button value  to LEDs
		XGpio_DiscreteWrite( &LEDInst , LED_CHANNEL , btn_value );

		for ( Delay = 0;  Delay  < LED_DELAY; Delay++ );
	}
	return  XST_SUCCESS;
}
*/
#define BTN0 1
#define BTN1 2
#define BTN2 4
#define BTN3 8
#define BTN4 16
#define BTN5 32
#define BTN6 64
#define BTN7 128

#define EYE 2
#define BODY 46

typedef enum _color {
		eS = 0b000000000000,
		eW = 0b111111111111,
	 eLila = 0b011000000110,
		eR = 0b111100000000,
	eRdark = 0b011100000000,
		eG = 0b000011110000,
	eGdark = 0b000001110000,
		eB = 0b000000001111,
	eBdark = 0b000000000111
} ecolor;

typedef enum _visu {
	arms_down,
	arms_up,
	arms_count
} evisu;

typedef enum _xy {
	x,
	y,
	xy_count
} exy;

typedef enum _move {
	left,
	right,
	move_count
} emove;

typedef enum _destr {
	intact,
	destroyed,
	destr_count
} edestroyed;

/* left upper corner of instance */
typedef struct _coord {
	int x;
	int y;
} cor;

typedef struct _exterestric {
	cor pos;
	cor box;
	edestroyed destroyed;
} exterestric;

uint fig[2][2][BODY];

void paintsquare(uint x, uint y, uint size, ecolor color) {
	if (x < 0 || x > 630)
		return;
	if (y < 0 || y > 470)
		return;
		
	uint i,j;
	for (i = x; i < x+size; ++i)
		for (j = y; j < y+size; ++j)
			LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, (i << 21 | j << 12 | color));
} 

void resetbg (ecolor color) {
	int i,j;
	for (i = 0; i < 680; ++i)
		for (j = 0; j < 480; ++j)
			LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, (i << 21 | j << 12 | color));
}


#if 0
int SWReadExample () {
	volatile  int  Delay;

	// loop  forever  blinking  the  LED.
	while( 1 ) {
		// read buttons
		sw_value = XGpio_DiscreteRead (&SWInst , 1);
		xil_printf ("Switch: %x\n\r",sw_value);
		sleep(1);
		//for ( Delay = 0;  Delay  < LED_DELAY; Delay++ );
	}
	return  XST_SUCCESS;
}
#endif

int  main()
{
	double DELAY = 10000000000,z;

	// srand(5637);

	init_platform ();

	int status ;
	// ----------------------------------------------------
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	// ----------------------------------------------------
	// Initialise LEDs
	//status = XGpio_Initialize (&LEDInst , LEDS_DEVICE_ID );
	//if ( status != XST_SUCCESS )
	//	return XST_FAILURE ;

	// Initialise Push Buttons
	status = XGpio_Initialize (&SWInst , SW_DEVICE_ID );
	if ( status != XST_SUCCESS )
		return XST_FAILURE ;

	// Set LEDs direction to outputs
	//XGpio_SetDataDirection (&LEDInst,1,0x00);
	// Set all switches direction to inputs
	XGpio_SetDataDirection (&SWInst,1,0xFF);

	print("Hello world\n\r");

	//SWReadExample ();

	uint i,j,k;

	exterestric initalien = {
		.pos = {100,100},
		.box = {110,80},
		.destroyed = intact
	};

	uint visu[arms_count][xy_count][BODY] =
	{
		[arms_down] = {
			[x] = {2,8,3,7, 2,3,4,5,6,7,8, 1,2,4,5,6,8,9, 0,1,2,3,4,5,6,7,8,9,10, 0,2,3,4,5,6,7,8,10, 0,2,8,10, 3,4,6,7},
			[y] = {0,0,1,1, 2,2,2,2,2,2,2, 3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4,4,4, 4, 5,5,5,5,5,5,5,5, 5, 6,6,6, 6, 7,7,7,7}
		},
		[arms_up] = {
			[x] = {2,8,0,3,7,10, 0,2,3,4,5,6,7,8,10, 0,1,2,4,5,6,8,9,10, 0,1,2,3,4,5,6,7,8,9,10, 2,3,4,5,6,7,8, 2,8, 1,9},
			[y] = {0,0,1,1,1, 1, 2,2,2,2,2,2,2,2, 2, 3,3,3,3,3,3,3,3, 3, 4,4,4,4,4,4,4,4,4,4, 4, 5,5,5,5,5,5,5, 6,6, 7,7}
		}
	};

	emove dir = right;
	evisu toggle = arms_up;
	uint size = 5;
	#define alh  8
	#define alv  4
	uint x_step = 5;
	uint y_step = 0;

	exterestric alien[alh][alv];

	for ( i = 0; i < alh; ++i) {
		for (j = 0; j < alv; ++j) {
			memcpy(&alien[i][j],&initalien,sizeof(exterestric));
			alien[i][j].pos.x = 5 + i*55 + i*1*size;
			alien[i][j].pos.y = 5 + j*40 + j*1*size;

			alien[i][j].box.x = 55;
			alien[i][j].box.y = 40;
		}
	}

	uint write_new = 1;
	uint delete = 0;

	uint btn2_on = 0; // btn0_on = 0,

	ecolor bgcolor = eLila;
	resetbg(bgcolor);

	int test = 1;
	while (1) {

//		sw_value = XGpio_DiscreteRead (&SWInst , 1);

		// random walker
//		if ( sw_value & BTN1 && write_new == 0 ) {
//			//xil_printf ("Switch 1 active!!!: %x\n\r",sw_value);
//		}

		// delete
		for (i = 0; i < alh; ++i) {
			for (j = 0; j < alv; ++j) {
				for (k = 0; k < BODY; ++k){
					paintsquare(alien[i][j].pos.x + size*visu[toggle][x][k],
								alien[i][j].pos.y + size*visu[toggle][y][k], size, bgcolor);
				}

			}
		}

		// check is direction has to be changed
		for (i = 0; i < alh; ++i) {
			for (j = 0; j < alv; ++j) {
			if (dir == right) {
				if (alien[i][j].pos.x + alien[i][j].box.x > 475){
					dir = left;
					x_step = 5;
					y_step = 5;
				}
			else
				if (alien[i][j].pos.x < 5) {
					dir = right;
					x_step = -5;
					y_step = 5;
				}
			}
		}

		if (toggle == arms_up)
			 toggle = arms_down;
		 else
			 toggle = arms_up;

		// write_new
		for (i = 0; i < alh; ++i) {
			for (j = 0; j < alv; ++j) {
				alien[i][j].pos.x += x_step;
				alien[i][j].pos.y += y_step;
				for (k = 0; k < BODY; ++k){
					paintsquare(alien[i][j].pos.x + size*visu[toggle][x][k],
								alien[i][j].pos.y + size*visu[toggle][y][k], size, eG);
				}
			}
		}

		sleep (1);

	}; // while

	cleanup_platform ();
	return  0;
}

//	alien exter[20];
//	exter[0].pos.x = 100;
//	exter[0].pos.y = 100;

	//uint *fig[arms_count];//[xy_count][BODY];

//	exterestric initalien = {
//			.pos = {100,100},
//			.box = {0,0},
//			.fig = {
//			[arms_down] = {
//				[x] = {2,8,3,7, 2,3,4,5,6,7,8, 1,2,4,5,6,8,9, 0,1,2,3,4,5,6,7,8,9,10, 0,2,3,4,5,6,7,8,10, 0,2,8,10, 3,4,6,7},
//				[y] = {0,0,1,1, 2,2,2,2,2,2,2, 3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4,4,4, 4, 5,5,5,5,5,5,5,5, 5, 6,6,6, 6, 7,7,7,7}},
//			[arms_up] = {
//				[x] = {2,8,0,3,7,10, 0,2,3,4,5,6,7,8,10, 0,1,2,4,5,6,8,9,10, 0,1,2,3,4,5,6,7,8,9,10, 2,3,4,5,6,7,8, 2,8, 1,9},
//				[y] = {0,0,1,1,1, 1, 2,2,2,2,2,2,2,2, 2, 3,3,3,3,3,3,3,3, 3, 4,4,4,4,4,4,4,4,4,4, 4, 5,5,5,5,5,5,5, 6,6, 7,7}}
//			 },
//			 .destroyed = intact
//	};

		//xil_printf ("Switch: %x\n\r",sw_value);
		//xil_printf ("Switch: %d\n\r",rand()%7);
		//for( i = 0 ; i < 10 ; ++i )
		//	LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, arr[i]);

		/* toggle eye color */
//		if (btn0_on != (sw_value & BTN0) ) {
//			write_new = 1;
//			btn0_on = sw_value & BTN0;
//
//			if (btn0_on == BTN0)
//				color = eB;
//			else
//				color = eR;
//		}

		/* toggle bg color */
//		if (btn2_on != (sw_value & BTN2) ) {
//			write_new = 1;
//			btn2_on = sw_value & BTN2;
//
//			xil_printf ("Switch 2: %x\n\r",(sw_value & BTN2));
//			if (btn2_on == BTN2) {
//				xil_printf ("Switch 2 = 1: %d\n\r",1);
//				bgcolor = eBdark;
//				resetbg(bgcolor);
//			}
//			else {
//				bgcolor = eLila;
//				resetbg(bgcolor);
//			}
//		}

		//sleep(1);
//		if (delete) {
//			// do we need wait statements to not write too fast to the FPGA
//			for (i = 0; i < alh; ++i)
//				for (j = 0; j < alv; ++j)
//					for (k = 0; k < BODY; ++k)
//						paintsquare(alien[i][j]->pos.x + size*visu[arms_up][x][k], alien[i][j]->pos.y + size*visu[arms_up][y][k], size, bgcolor);
//
////			if ((alien[i]->pos.x + pos_new.x) > 0 && (alien[0]->pos.x + pos_new.x) < 530 )
////				alien[i]->pos.x += pos_new.x;
////			if ((alien[i]->pos.y + pos_new.y) > 0 && (alien[0]->pos.y + pos_new.y) < 400 )
////				alien[i]->pos.y += pos_new.y;
//
//			delete = 0;
//		}

//				for (j = 0; j < alv; ++j)
			// do we need wait statements to not write too fast to the FPGA
