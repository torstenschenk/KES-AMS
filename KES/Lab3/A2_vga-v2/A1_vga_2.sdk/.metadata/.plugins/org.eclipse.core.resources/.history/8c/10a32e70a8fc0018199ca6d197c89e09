/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */
#include  <stdio.h>
#include  <stdlib.h>
#include  <time.h>

#include "platform.h"
//  Include  Files
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"
#include "lab3_a1_vga_v2.h"

//  Definitions
#define BASE_ADDR 0x43C00000
//#define  LEDS_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID
#define  SW_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID

#define  LED_DELAY  10000000
#define  LED_CHANNEL 1
#define  printf  xil_printf

XGpio  SWInst; // LEDInst
static int sw_value ;

/*
int  LEDOutputExample( VOID ) {
	volatile  int  Delay;

	// loop  forever  blinking  the  LED.
	while( 42 ) {
		// read buttons
		btn_value = XGpio_DiscreteRead (&BTNInst , 1);
		//  write  button value  to LEDs
		XGpio_DiscreteWrite( &LEDInst , LED_CHANNEL , btn_value );

		for ( Delay = 0;  Delay  < LED_DELAY; Delay++ );
	}
	return  XST_SUCCESS;
}
*/
#define BTN0 1
#define BTN1 2
#define BTN2 4
#define BTN3 8
#define BTN4 16
#define BTN5 32
#define BTN6 64
#define BTN7 128

#define EYE 2
#define BODY 46

typedef enum _color {
	eW = 0,
	eR = 1,
	eG = 2,
	eB = 3
} ecolor;

typedef struct _coord {
	int x;
	int y;
} coord;

uint eyex[EYE] = {3,7};
uint eyey[EYE] = {3,3};
uint spx[BODY] = {2,8,3,7, 2,3,4,5,6,7,8, 1,2,4,5,6,8,9, 0,1,2,3,4,5,6,7,8,9,10, 0,2,3,4,5,6,7,8,10, 0,2,8,10, 3,4,6,7};
uint spy[BODY] = {0,0,1,1, 2,2,2,2,2,2,2, 3,3,3,3,3,3,3, 4,4,4,4,4,4,4,4,4,4, 4, 5,5,5,5,5,5,5,5, 5, 6,6,6, 6, 7,7,7,7};

void paintsquare(uint x, uint y, uint size, ecolor color) {
	if (x < 0 || x > 630)
		return;
	if (y < 0 || y > 470)
		return;
		
	uint i,j;
	for (i = x; i < x+size; ++i)
		for (j = y; j < y+size; ++j)
			LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, (i << 11 | j << 2 | color));
} 

#if 0
int SWReadExample () {
	volatile  int  Delay;

	// loop  forever  blinking  the  LED.
	while( 1 ) {
		// read buttons
		sw_value = XGpio_DiscreteRead (&SWInst , 1);
		xil_printf ("Switch: %x\n\r",sw_value);
		sleep(1);
		//for ( Delay = 0;  Delay  < LED_DELAY; Delay++ );
	}
	return  XST_SUCCESS;
}
#endif

int  main()
{
	srand(5637);

	init_platform ();

	int status ;
	// ----------------------------------------------------
	// INITIALIZE THE PERIPHERALS & SET DIRECTIONS OF GPIO
	// ----------------------------------------------------
	// Initialise LEDs
	//status = XGpio_Initialize (&LEDInst , LEDS_DEVICE_ID );
	//if ( status != XST_SUCCESS )
	//	return XST_FAILURE ;

	// Initialise Push Buttons
	status = XGpio_Initialize (&SWInst , SW_DEVICE_ID );
	if ( status != XST_SUCCESS )
		return XST_FAILURE ;

	// Set LEDs direction to outputs
	//XGpio_SetDataDirection (&LEDInst,1,0x00);
	// Set all switches direction to inputs
	XGpio_SetDataDirection (&SWInst,1,0xFF);

	print("Hello world\n\r");

	//SWReadExample ();
	uint i,j;
	coord pos = {100,100};
	coord pos_new = {100,100};
	
	uint write_new = 1;
	uint delete = 0;
	uint background_repaint = 0;
	ecolor bgcolor = eW;

	uint size = 10;
	ecolor color = eR;
	uint btn0_on = 0, btn1_on = 0, btn2_on = 0;

	for (i = 0; i < 679; ++i)
		for (j = 0; j < 479; ++j)
			LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, (i << 11 | j << 2 | 00));


	while (1) {

		sw_value = XGpio_DiscreteRead (&SWInst , 1);
		//xil_printf ("Switch: %x\n\r",sw_value);
		//xil_printf ("Switch: %d\n\r",rand()%7);
		//for( i = 0 ; i < 10 ; ++i )
		//	LAB3_A1_VGA_V2_mWriteReg((u32)BASE_ADDR, 0, arr[i]);

		/* toggle eye color */
		if (btn0_on != (sw_value & BTN0) ) {
			write_new = 1;
			btn0_on = sw_value & BTN0;

			if (btn0_on == 1)
				color = eB;
			else
				color = eR;
		}
		
		// random walker
		if ( sw_value & BTN1 && write_new == 0 ) {
			//xil_printf ("Switch 1 active!!!: %x\n\r",sw_value);
            double DELAY = 10000000,z;
			for (z = 0; z<DELAY;z+=1)
				delete = 1;

			write_new = 60;
			uint dir = rand() % 7;
			switch (dir) {
			case 0:
				// up
				pos_new.x = 0;
				pos_new.y =-2;
				break;
			case 1:
				// up right
				pos_new.x = 1;
				pos_new.y = -1;
				break;
			case 2:
				// right
				pos_new.x = 2;
				pos_new.y = 0;
				break;
			case 3:
				// right down
				pos_new.x = 1;
				pos_new.y = 1;
				break;
			case 4:
				// down
				pos_new.x = 0;
				pos_new.y = 2;
				break;
			case 5:
				// down left
				pos_new.x = -1;
				pos_new.y = 1;
				break;
			case 6:
				// left
				pos_new.x = -2;
				pos_new.y = 0;
				break;
			case 7:
				// up left
				pos_new.x = -1;
				pos_new.y = -1;
				break;
			default:
				break;
			}
		}

		#if 0
		/*bg color toggle */
		if (btn2_on != (sw_value & BTN2) ) {
			write_new = 1;
			btn2_on = sw_value & BTN2;

			if (btn2_on == 1)
				bgcolor = e
		}
		#endif

		if (delete) {
			// do we need wait statements to not write too fast to the FPGA
			for (i = 0; i < EYE; ++i)
				paintsquare(pos.x + size*eyex[i], pos.y + size*eyey[i], size, bgcolor);
			for (i = 0; i < BODY; ++i)
				paintsquare(pos.x + size*spx[i], pos.y + size*spy[i], size, bgcolor);

			if ((pos.x + pos_new.x) > 0 && (pos.x + pos_new.x) < 530 )
				pos.x += pos_new.x;
			if ((pos.y + pos_new.y) > 0 && (pos.y + pos_new.y) < 400 )
				pos.y += pos_new.y;

			delete = 0;
		}

		if (write_new) {
			// do we need wait statements to not write too fast to the FPGA
			for (i = 0; i < EYE; ++i)
				paintsquare(pos.x + size*eyex[i], pos.y + size*eyey[i], size, color);
			for (i = 0; i < BODY; ++i)
				paintsquare(pos.x + size*spx[i], pos.y + size*spy[i], size, eG);
			
			write_new--;
		}
		
		//sleep(1);

	}; // while

	cleanup_platform ();
	return  0;
}

//LEDOutputExample ();

// how to write to ram
#if 0
   -- Write RAM-Data from AXI-Stream
   -- Get  from AXI-Stream slv_reg0, with the information:
   -- X Position
   -- Y Position
   -- Colour
   -- and write it into the RAM.
   process(S_AXI_ACLK)
       variable x_position   : integer;
       variable y_position   : integer;
       variable RAM_position : integer;

       begin
           if rising_edge(S_AXI_ACLK) then
                   x_position := to_integer(ieee.NUMERIC_STD.unsigned(  slv_reg0(20 downto 11) ) );
                   y_position := to_integer(ieee.NUMERIC_STD.unsigned(  slv_reg0(10 downto 2 ) ) );

                   RAM_position :=  (x_position + (y_position * 640 ));

                   RAM(RAM_position) <= slv_reg0(1 downto 0);
           end if;
   end process;
#endif
